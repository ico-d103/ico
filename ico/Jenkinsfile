pipeline {
    agent any
    
    tools {nodejs "front"}
    
    environment {
        DOCKER_COMPOSE_VERSION = '1.29.2'
    }
    
    stages {
        
        stage('github_clone') {
            steps {
                git branch: 'FE', credentialsId: 'github_token', url: 'https://github.com/ico-d103/ico.git'
            }
        }
        
        stage('docker-clean-up') {
            steps {
                script {
                    sshagent(credentials: ['ubuntu_ssh_key']) {
                    
                    sh '''
                    if test "`docker ps -aq --filter ancestor=front`"; then
                    
					ssh -o StrictHostKeyChecking=no ubuntu@www.iconomy.kr "docker stop $(docker ps -aq --filter ancestor=front)"
                    ssh -o StrictHostKeyChecking=no ubuntu@www.iconomy.kr "docker rm -f $(docker ps -aq --filter ancestor=front)"
                    ssh -o StrictHostKeyChecking=no ubuntu@www.iconomy.kr "docker rmi front"

                    fi
                    '''
                    }
                }
                
            }
        }
        
        stage('docker-build'){
            steps {
                script {
                    echo 'Build Docker'
                    dir('ico') {
                        script {
                            
                            sh """
                                if ! command -v docker > /dev/null; then
                                    curl -fsSL https://get.docker.com -o get-docker.sh
                                    sh get-docker.sh
                                fi
                            """
                            
                            sh 'docker-compose -f docker-compose.yml build'
                        }
                    }
                }
            }
        }
        
        stage('Docker run') {
            steps {
                dir('ico') {
                    script {
                        sh 'docker-compose -f docker-compose.yml up -d'
                    }
                }
            }
        }
    }
    post {
        success {
            script {
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                mattermostSend (color: 'good', 
                message: "빌드 성공: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)", 
                endpoint: 'https://meeting.ssafy.com/hooks/m3x6f36pktbudkboif1ebrhf3o', 
                channel: 'D103-Jenkins',
                icon: 'https://www.jenkins.io/images/logos/cute/cute.png'
                )
            }
        }
        failure {
            script {
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                mattermostSend (color: 'danger', 
                message: "빌드 실패: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)", 
                endpoint: 'https://meeting.ssafy.com/hooks/m3x6f36pktbudkboif1ebrhf3o', 
                channel: 'D103-Jenkins',
                icon: 'https://www.jenkins.io/images/logos/chatterbox/chatterbox.png'
                )
            }
        }
    }
}
